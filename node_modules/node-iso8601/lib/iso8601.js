/**
 * ISO8601.js
 *
 * Use javascript's native Date object to calculate the duration
 * or interval accompanying an ISO8601 formatted date string.
 *
 * @copyright   2013 John Rocela <me@iamjamoy.com>
 * @license     MIT License
 */
var moment = require('moment');

// Add a format function to the Date object
Date.prototype.format = function(format) {
    return moment(this).format(format);
}

// The ISO8601 object
var ISO8601 = function(string) {
    // Defaults
    this.repeat = null;
    this.duration = null;
    this.date = new Date().toISOString();

    try {
        // Parse the Date String
        var date = this.parse(string);

        this.repeat = date.repeat;
        this.date = date.date;
        this.duration = date.duration;
    } catch (err) {
        throw Error(err);
    }

}

// Parse Date String
ISO8601.prototype.parse = function(DateString) {
    var matches = DateString.split('/'),
        result = {};

    switch (matches.length) {
        case 2:
            
        break;
        default:
            result.repeat = matches[0].match(/R(\d)/);
            result.repeat = result.repeat[1] || null;

            result.date = new Date(matches[1]);
            if (result.date == 'Invalid Date') {
                throw Error('Not valid ISO8601 Date format.');
            }

            result.duration = this.parseDuration(matches[2]);
            if (!result.duration) {
                throw Error('Not valid ISO8601 Duration format.');
            }
        break;
    }

    return result;
}

// Parse Duration String
ISO8601.prototype.parseDuration = function(DurationString) {
    var matches = DurationString.match(/^P([0-9]+Y|)?([0-9]+M|)?([0-9]+D|)?T?([0-9]+H|)?([0-9]+M|)?([0-9]+S|)?$/),
        result = {};

    if (matches) {
        result.year = parseInt(matches[1]);
        result.month = parseInt(matches[2]);
        result.day = parseInt(matches[3]);
        result.hour = parseInt(matches[4]);
        result.minute = parseInt(matches[5]);
        result.second = parseInt(matches[6]);

        result.toString = function() {
            var string = '';

            if (this.year) string += this.year + ' Year' + (this.year == 1 ? '': 's') + ' ';
            if (this.month) string += this.month + ' Month' + (this.month == 1 ? '': 's') + ' ';
            if (this.day) string += this.day + ' Day' + (this.day == 1 ? '': 's') + ' ';
            if (this.hour) string += this.hour + ' Hour' + (this.hour == 1 ? '': 's') + ' ';
            if (this.minute) string += this.minute + ' Minute' + (this.minute == 1 ? '': 's') + ' ';
            if (this.second) string += this.second + ' Second' + (this.second == 1 ? '': 's') + ' ';

            return string;
        }

        return result;
    } else {
        return false;
    }
}

ISO8601.prototype.getRepeat = function() {
    return this.repeat;
}

ISO8601.prototype.getDate = function() {
    return new Date(this.date);
}

ISO8601.prototype.getDuration = function() {
    return this.duration;
    this.duration.prototype

    return this.duration;
}

ISO8601.prototype.getNextDate = function(n) {
    var date = this.getDate(),
        dates = [];

    n = n || 1;
    
    while (n--) {
        if (this.duration.year) {
            date.setFullYear(date.getFullYear() + parseInt(this.duration.year));
        }

        if (this.duration.month) {
            date.setMonth(date.getMonth() + parseInt(this.duration.month));
        }

        if (this.duration.day) {
            date.setDate(date.getDate() + parseInt(this.duration.day));
        }

        if (this.duration.hour) {
            date.setHours(date.getHours() + parseInt(this.duration.hour));
        }

        if (this.duration.minute) {
            date.setMinutes(date.getMinutes() + parseInt(this.duration.minute));
        }

        if (this.duration.second) {
            date.setSeconds(date.getSeconds() + parseInt(this.duration.second));
        }

        var copy = new Date(date);
        dates.push(copy);
    }

    return (dates.length == 1) ? dates[0]: dates;
}

// Expose the API
module.exports = ISO8601;